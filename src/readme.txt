
Фреймворк для создания графиков.

Основная идея заключается в использовании компонентов, как составляющих для графиков. 
Компоненты это готовые блоки, которые содержат определенную логику. Например миникарта, чекбоксы, и тп

Преимущества такого подхода:
1) Переиспользование кода в разных графиках, а значит и меньше однотипного кода
2) Меньше вероятность совершить ошибку при создании очередного графика, т.к не нужно копировать куски кода с прошлых графиков
   Компоненты могут иметь свое API и параметры, что позволяет делать их максимально гибкими
3) Высокая скорость разработки. За счет переиспользования компонентов, вы можете с минимальными усилиями создавать самые разные графики


Оптимизация
Графики созданные на этом фреймворке хорошо оптимизированы.
Перерисовывание происходит только при необходимости, а элементы которые находятся за пределами видимости пропускаются


Структура папок
1) charts - тут находятся графики
2) core - ядро фреймворка
3) elements - элементы, которые рендерятся на холсте. Каждый элемент обязательно имеет render функцию, которя что-то рисует
4) components - бизнес логика графиков. Компоненты созданы для уменьшения кол-ва повторений кода, при созданни графиков. 
   Например есть компонент Navigator и Map, которые можно использовать в нескольких графиках


Основные классы и API.

1) Event - класс хелпер, который добавляет методы on и emit
   1. on(event, callback) - подписаться на событие event
   2. emit(event, data, [data2]) - вызвать событие event, уведомив всех подписчиков события.
      Параметры data, data2 будут переданы в callback

2) Input - слой ввода данных, наследуется от Event.
   Отвечает за события ввода(мышь, тач), конвертирует координаты в локальные величины(относильно холста) и передает элементам.
   Доступные события:
      1. move
      2. leave
      3. down
      4. up
   
3) Элементы - группа классов
   Каждый элемент реализует метод render(ctx, input, time), который рисует на холсте, используя API canvas.

   Готовые элементы:
      1. Circle
      2. Line - используется для построения линий. Обязательно должен находиться в LineGroup
      3. Rectangle
      4. Text
      5. DragScaling - это прозрачный прямоугольник, который может растягиваться и перетаскиваться пользователем 
         Используется в компоненте Navigator
      6. LineGroup - рендер для линий, чтобы отрисовать путь построенный элементами Line.
         Используется только совместно с Line. Создан с целью оптимизации рендеринга
      7. Position - легкий компонент, который служит для объединения нескольких элементов и/или их позиционирования

   В большинстве случаем вам не придется создавать собственные элементы, но иногда возникает такая необходимость.
   Например вам нужна особая фигура(многоугольник, треугольник и тп).
   В этом случае вы должны создать новый класс элемента и расширить его базовым классом в зависимости от ваших требований.
      
   Список базовых классов элементов:
      1. RenderElement - наследуется от Event. Самый простой элемент, который содержит только функцию рендер, и проверку видимости
         Вы должны переопределить два метода:
            1. render(ctx, input, time)
            2. isVisible(canvas_width, canvas_height) - если вернет false, объект пропустит цикл рендеринга. Используется для оптимизации
      2. HasChildren - наследуется от RenderElement, добавляет возможность элемента иметь несколько дочерних элементов, с относительными координатами
         Необходимо переопределить методы RenderElement класса, а также передать переменную children
      3. HasChild - наследуется от RenderElement, добавляет возможность элемента иметь один дочерний элемент, с относительными координатами
         Необходимо переопределить методы RenderElement класса, а также передать переменную child
      4. MouseElement - наследуется от HasChild. Имеет все свойства классов RenderElement и HasChild. Добавляет возможность взаимодействия с мышью/тачем.
         Необходимо переопределить методы:
            1. isHover(x, y) - находятся ли координаты на элементе
         Вызывает события:
            1. mousemove
            2. mouseleave
            3. down
            4. up

4) Component
   Это строительные блоки, из которых, как из конструктора, собираются графики. Могут состоять из других компонентов и элементов
   Имеют доступ к данным, теме, языку, анимациям и возможностью вызывать перерисовку холста при необходимости

   Каждый компонент должен наследоваться от базового класса Component
   
   Компоненты можно условно разделить на два типа:
      1. Те, что выводятся на холст.
         Такие компоненты имеют метод $build(theme, locale), который возвращает Element для рендера
         Например: Navigator, Map
      2. Те, что не выводятся на холст.
         Эти компоненты не имеют метода $build или имеют, но он ничего не возвращает.
         Например Checkboxes - этот компонент ничего не выводит на холст, т.к создает элементы в DOM. 
         Плюс такого подхода в том, что сохраняется простой доступ к состоянию графика.

   Основная разница между ними в наличии метода $build. Поэтому вы сами решаете как будет отображаться ваш компонент, и будет ли вообще отображаться

   Компоненты могут переопределить следующие методы
      1. $onTheme(theme) - вызывается при смене темы
      2. $onLocale(locale) - вызывается при смене языка
      3. $onData(data) - вызывается при изменении/получении данных
      4. $onShowColumn(index) - вызывается после того как была скрыта часть данных(column)
      5. $onHideColumn(index) - обратное событию 4

   Методы:
      1. $showColumn(index) - скрыть часть данных(column)
      2. $hideColumn(index) - показать часть данных(column)
      3. $build(theme, locale) - используется для рендеринга компонента, может вернуть элемент или другой компонент для отображения на холсте.
   
   Переменные:
      1. $canvas - хранит текущий canvas
      2. $hidden_columns - массив, содержаший индексы скрытых данных
      3. $visible_columns - массив, содержаший индексы видимых данных
      4. $element - элемент, возвращенный методов $build

   Готовые компоненты находятся в папке /components. Их можно использовать в разных графиках
      1. Navigator - навигатор для миникарты, который нужен для взаимодействия пользователя с миникартов.
         Должен быть вложен в компонент Map
      2. 
      3. Checkboxes - чекбоксы для управления видимостью отдельных данных(column)

5) Animation
   Отвечает за анимации в компонентах и автоматически перерисовывает холст если анимация запущена

   Методы:
      1. run([data]) - запускает анимацию
         Параметры:
            1. data - (необязательно) данные которые будут переданы в обработчики

   Параметры:
      1. component - Component в котором работает анимация
      2. duration - продолжительность анимации в миллисекундах
      3. curve(time_fraction) - временная функция, вызывается на каждый шаг анимации
      4. onStart([data]) - вызывается перед началом анимации
         Параметры:
            1. data - (необязательно) данные которые были переданы в функцию запуска run()
      4. handle(progress, [data]) - обработчик анимации, тут находится основная логика вашей анимации
         Параметры:
            1. progress - число(float) от 0 до 1
            2. data - (необязательно) данные которые были переданы в функцию запуска run()
      5. onEnd() - вызывается после завершения анимации


6) Chart
   Это базовый класс графика. Отвечает за передачу данных, темы и языка в компоненты

   Класс должен иметь две переменные:
      1. defaultTheme {Object} - тема по-умолчанию для вашего графика. Может содержать любые данные в формате ключ:значение
      2. defaultLocale {Object} - язык по-умолчанию. Может содеражать любые данные в формате ключ:значение

   Методы API:
      1. setTheme(theme) - установить тему. Пропущенные значения будут взяты из defaultTheme
      2. setData(data) - установить данные
      3. setLocale(locale) - установить язык. Пропущенные значения будут взяты из defaultLocale

   События
      1. $onCreate(theme, locale) - вызывается перед инициализацией графика
      2. $onCreated(theme, locale) - вызывается после инициализации

   Инициализация графика
   Чтобы отобразить график на странице создайте новый экземпляр вашего класса. Например, new MyChart(id, width, height, theme, locale)

   Параметры:
      1. id {string} - ID элемента, в котором будет создан canvas
      2. width {number} - ширина
      3. height {number} - высота
      4. theme {number} - (необязательно) язык. Пропущенные значения будут взяты из defaultLocale
      5. locale {number} - (необязательно) тема. Пропущенные значения будут взяты из defaultTheme